---
import { languages } from "@/i18n/ui";
import { getLangFromUrl, useTranslatedPath } from "@/i18n/utils.ts";

const lang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(lang);
---

<div class="relative">
  <button
    id="language-toggle-btn"
    class="appearance-none border-none flex items-center justify-center hover:scale-125 transition text-gray-700 dark:text-blue-400 w-6 h-6"
  >
    <span class="sr-only">Elige el idioma</span>
    {Object.entries(languages).map(([langKey]) => (
      <span
        id={langKey}
        class="language-toggle-icon absolute size-5 transition-all flex items-center justify-center"
        style={langKey === lang ? "transform: scale(1)" : "transform: scale(0)"}
      >
        {langKey.toUpperCase()}
      </span>
    ))}
  </button>

  <div
    id="languages-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-2 min-w-[8rem] rounded-lg
    border border-gray-300 bg-white/95 text-gray-900 shadow-lg
    dark:border-gray-700 dark:bg-gray-900/95 dark:text-gray-100
    dark:shadow-[0_4px_15px_rgba(255,255,255,0.08)] backdrop-blur-md"
  >
    <ul>
      {Object.entries(languages).map(([langKey, langValue]) => {
        if (langKey === lang) return null;
        return (
          <li 
            class="languages-menu-option rounded-sm hover:bg-gray-200 dark:hover:bg-blue-900"
            onclick={`window.location.href='${translatePath("/", langKey)}'`}
          >
            <div class="px-2 py-1.5 w-full h-full cursor-pointer text-gray-900 dark:text-blue-400">
              {langValue}
            </div>
          </li>
        )
      })}
    </ul>
  </div>
</div>


<style>
  #languages-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  .language-toggle-icon:first-child {
    position: static;
  }
  
  /* Hacer todo el espacio del li clickeable */
  .languages-menu-option {
    position: relative;
  }
  .languages-menu-option > div {
    position: relative;
    z-index: 1;
  }
</style>

<script is:inline>
  // Inicializar el gestor de menús si no existe
  window.menuManager = window.menuManager || {
    currentMenu: null,
    toggleMenu: (newMenu) => {
      if (window.menuManager.currentMenu === newMenu) {
        newMenu.classList.remove('open');
        window.menuManager.currentMenu = null;
      } else {
        if (window.menuManager.currentMenu) {
          window.menuManager.currentMenu.classList.remove('open');
        }
        newMenu.classList.add('open');
        window.menuManager.currentMenu = newMenu;
      }
    },
    closeAll: () => {
      if (window.menuManager.currentMenu) {
        window.menuManager.currentMenu.classList.remove('open');
        window.menuManager.currentMenu = null;
      }
    }
  };

  const languagesMenu = document.getElementById("languages-menu");

  document.getElementById("language-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    window.menuManager.toggleMenu(languagesMenu);
  });

  document.addEventListener("click", () => window.menuManager.closeAll());

  document.addEventListener('astro:after-swap', () => {
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
  });
   // Redirección basada en el idioma del navegador
   document.addEventListener('DOMContentLoaded', function() {
    const currentPath = window.location.pathname;
    
    // Solo redirigir si estamos en la raíz (español)
    if (currentPath === '/') {
      const browserLang = navigator.language;
      
      // Verificar si el idioma del navegador es inglés
      if (browserLang.startsWith('en')) {
        window.location.href = '/en/';
      }
    }
  });
</script>